<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1502174971000</longProp>
        <longProp name="ThreadGroup.end_time">1502174971000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <org.albertyang2007.jmeter.grpc.client.GrpcClientSampler guiclass="TestBeanGUI" testclass="org.albertyang2007.jmeter.grpc.client.GrpcClientSampler" testname="GrpcClientSampler-sendCir" enabled="false">
          <stringProp name="hostname">localhost</stringProp>
          <intProp name="port">13868</intProp>
          <stringProp name="packageN">com.ericsson.sep.diameter.t6a.grpc.sender</stringProp>
          <stringProp name="service">DiameterT6aSender</stringProp>
          <boolProp name="asyncCall">false</boolProp>
          <stringProp name="method">sendCir</stringProp>
          <stringProp name="request">com.ericsson.sep.diameter.grpc.CirT6Request</stringProp>
          <stringProp name="requestBuilderCode">import com.ericsson.sep.diameter.grpc.*;
import com.google.protobuf.*;

public class RequestFactory {
	BaseCommand baseCommand = BaseCommand.newBuilder()
			.setDestinationHost(&quot;localhost&quot;)
			.setDestinationRealm(&quot;mme1.com&quot;)
			.addSupportedFeatures(newSupportedFeatures(10L, 100001L))
			.addSupportedFeatures(newSupportedFeatures(20L, 200001L))
			.build();
	
	BusinessContext businessCtx = BusinessContext.newBuilder()
			.setTradeId(&quot;business-tradeid1&quot;)
			.setContext(copyFrom(&quot;data-context&quot;))
			.setTradeId(&quot;TraceId_00001&quot;)
			.build();
	
	MonitoringEventConfiguration monEventConf = MonitoringEventConfiguration.newBuilder()
			.setScefId(copyFrom(&quot;scefId001&quot;))
			.setScefReferenceId(Unsigned32.newBuilder().setValue(1000).build())
			.setMonitoringType(MonitoringType.AVAILABILITY_AFTER_DDN_FAILURE)
			.setChargedParty(&quot;chargedParty&quot;)
			.addScefReferenceIdForDeletion(1000)
			.addScefReferenceIdForDeletion(2000)
			.build();
	
	//helper method
	static SupportedFeatures newSupportedFeatures(long featureList, long featureListId) {
        return SupportedFeatures.newBuilder()
                .setFeatureList(featureList).setFeatureListId(featureListId).build();

    }
	
	//helper method
	static ByteString copyFrom(String data){
		try{
			return ByteString.copyFrom(data, &quot;UTF-8&quot;);
		}catch(Exception e){
		}
		return null;
	}
	
	//fixing method name and return type for jmeter grpc plugin
	//pls do not change
	public Message buildRequest() {
		CirT6Request request = CirT6Request.newBuilder()
				.setBaseCommand(baseCommand)
				.setBusinessContext(businessCtx)
				.addMonitoringEventConfiguration(monEventConf)
				.build();
		return request;
	}
}</stringProp>
        </org.albertyang2007.jmeter.grpc.client.GrpcClientSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="750590513">DIAMETER_SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <org.albertyang2007.jmeter.grpc.client.GrpcClientSampler guiclass="TestBeanGUI" testclass="org.albertyang2007.jmeter.grpc.client.GrpcClientSampler" testname="GrpcClientSampler-sendCmr" enabled="true">
          <stringProp name="hostname">127.0.0.1</stringProp>
          <intProp name="port">13868</intProp>
          <stringProp name="packageN">com.ericsson.sep.diameter.t6a.grpc.sender</stringProp>
          <stringProp name="service">DiameterT6aSender</stringProp>
          <boolProp name="asyncCall">false</boolProp>
          <stringProp name="method">sendCmr</stringProp>
          <stringProp name="request">com.ericsson.sep.diameter.grpc.CmrRequest</stringProp>
          <stringProp name="requestBuilderCode">import com.ericsson.sep.diameter.grpc.*;
import com.google.protobuf.*;

public class RequestFactory {

    BaseCommand baseCommand = BaseCommand.newBuilder().setDestinationHost(&quot;127.0.0.1&quot;).setDestinationRealm(&quot;mme1.com&quot;)
            .addSupportedFeatures(newSupportedFeatures(10L, 100001L))
            .addSupportedFeatures(newSupportedFeatures(20L, 200001L)).build();

    BusinessContext businessCtx = BusinessContext.newBuilder().setContext(copyFrom(&quot;data-context&quot;))
            .setTradeId(&quot;TraceId_00001&quot;).build();

    //helper method
    static SupportedFeatures newSupportedFeatures(long featureList, long featureListId) {
        return SupportedFeatures.newBuilder().setFeatureList(featureList).setFeatureListId(featureListId).build();

    }

    static OcSupportedFeatures newOcSupportedFeaturesForTest() {
        return OcSupportedFeatures
                .newBuilder()
                .setOcFeatureVector(
                        Unsigned64.newBuilder().setValue(ByteString.copyFrom(new byte[] { 0, 0, 0, 0, 1, 1, 1, 1 })))
                .build();
    }

    //helper method
    static ByteString copyFrom(String data) {
        try {
            return ByteString.copyFrom(data, &quot;UTF-8&quot;);
        } catch (Exception e) {
        }
        return null;
    }

    //fixing method name and return type for jmeter grpc plugin
    //pls do not change
    public Message buildRequest() {
        CmrRequest request = CmrRequest
                .newBuilder()
                .setBaseCommand(baseCommand)
                .setBusinessContext(businessCtx)
                .setA3GppChargingCharacteristics(&quot;3GPP_Charging_Char&quot;)
                .setBearerIdentifier(copyFrom(&quot;BearIdValue&quot;))
                .setCmrFlags(Unsigned32.newBuilder().setValue(1).build())
                .setConnectionAction(ConnectionAction.CONNECTION_ESTABLISHMENT)
                .setExtendedPco(copyFrom(&quot;ExtendedPcoValue&quot;))
                .setMaximumUeAvailabilityTime(Time.newBuilder().setValue(System.currentTimeMillis()).build())
                .setOcSupportedFeatures(newOcSupportedFeaturesForTest())
                .setRatType(Enumerated.newBuilder().setValue(0).build())
                .setServiceSelection(&quot;ServiceSelectionValue&quot;)
                .setServingPlmnRateControl(
                        ServingPlmnRateControl.newBuilder()
                                .setUplinkRateLimit(Unsigned32.newBuilder().setValue(9876).build())
                                .setDownlinkRateLimit(Unsigned32.newBuilder().setValue(12345).build()).build())
                .setTerminalInformation(
                        TerminalInformation.newBuilder().setA3Gpp2Meid(copyFrom(&quot;a_3GPP_2_Meid&quot;)).setImei(&quot;IMEI_Value&quot;)
                                .setSoftwareVersion(&quot;Software_Version_Value&quot;).build())
                .setUserIdentifier(UserIdentifier.newBuilder()
                        .setUserName(&quot;123456789072611&quot;)
                        .setMsisdn(copyFrom(&quot;8615980000000&quot;))
                        .setExternalIdentifier(&quot;100000001@ericsson.com&quot;)
                        .build())
                .setVisitedPlmnId(copyFrom(&quot;460&quot;))
                .build();
        return request;
    }

}
</stringProp>
        </org.albertyang2007.jmeter.grpc.client.GrpcClientSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="750590513">DIAMETER_SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <org.albertyang2007.jmeter.grpc.client.GrpcClientSampler guiclass="TestBeanGUI" testclass="org.albertyang2007.jmeter.grpc.client.GrpcClientSampler" testname="GrpcClientSampler-sendTdr" enabled="false">
          <stringProp name="hostname">localhost</stringProp>
          <intProp name="port">13868</intProp>
          <stringProp name="packageN">com.ericsson.sep.diameter.t6a.grpc.sender</stringProp>
          <stringProp name="service">DiameterT6aSender</stringProp>
          <boolProp name="asyncCall">false</boolProp>
          <stringProp name="method">sendTdr</stringProp>
          <stringProp name="request">com.ericsson.sep.diameter.grpc.TdrRequest</stringProp>
          <stringProp name="requestBuilderCode">import com.ericsson.sep.diameter.grpc.*;
import com.google.protobuf.*;

public class RequestFactory {
	BaseCommand baseCommand = BaseCommand.newBuilder()
			.setDestinationHost(&quot;localhost&quot;)
			.setDestinationRealm(&quot;mme1.com&quot;)
			.addSupportedFeatures(newSupportedFeatures(10L, 100001L))
			.addSupportedFeatures(newSupportedFeatures(20L, 200001L))
			.build();
	
	BusinessContext businessCtx = BusinessContext.newBuilder()
			.setTradeId(&quot;business-tradeid1&quot;)
			.setContext(copyFrom(&quot;data-context&quot;))
			.setTradeId(&quot;TraceId_00001&quot;)
			.build();
	
	//helper method
	static SupportedFeatures newSupportedFeatures(long featureList, long featureListId) {
        return SupportedFeatures.newBuilder()
                .setFeatureList(featureList).setFeatureListId(featureListId).build();

    }
	
	static OcSupportedFeatures newOcSupportedFeaturesForTest() {
        return OcSupportedFeatures.newBuilder()
                .setOcFeatureVector(Unsigned64.newBuilder()
                        .setValue(ByteString.copyFrom(new byte[] { 0, 0, 0, 0, 1, 1, 1, 1 })))
                .build();
    }
	
	//helper method
	static ByteString copyFrom(String data){
		try{
			return ByteString.copyFrom(data, &quot;UTF-8&quot;);
		}catch(Exception e){
		}
		return null;
	}
	
	//fixing method name and return type for jmeter grpc plugin
	//pls do not change
	public Message buildRequest() {
		TdrRequest request = TdrRequest.newBuilder()
				.setBaseCommand(baseCommand)
				.setBusinessContext(businessCtx)
				.setBearerIdentifier(copyFrom(&quot;BearId_Value&quot;))
				.setMaximumRetransmissionTime(Time.newBuilder().setValue(System.currentTimeMillis()).build())
				.setNonIpData(copyFrom(&quot;nonIPData_Value&quot;))
				.setOcSupportedFeatures(newOcSupportedFeaturesForTest())
				.setScefWaitTime(Time.newBuilder().setValue(System.currentTimeMillis()).build())
				.setUserIdentifier(UserIdentifier.newBuilder()
						.setUserName(&quot;UserName_Value&quot;)
						.build())
				.build();
		return request;
	}
}
</stringProp>
        </org.albertyang2007.jmeter.grpc.client.GrpcClientSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="750590513">DIAMETER_SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
